package com.bdv.gestiondefirmas.desplieguedecuentas.controllers;


import com.bdv.gestiondefirmas.desplieguedecuentas.models.entities.*;
import com.bdv.gestiondefirmas.desplieguedecuentas.services.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("app")
public class CuentaController {

    @Autowired
    private ICuentaService cuentaService;


    @Autowired
    private ITelefonoService telefonoService;


    @Autowired
    private ISellosService sellosService;

    @Autowired
    private ISelloService selloService;


    @Autowired
    private ICondicionesService condicionesService;


    @Autowired
    private IFirmanteService firmanteService;

    @Autowired
    private IFirmaService firmaService;


    @Autowired
    private IPersonaService personaService;


    @Autowired
    private IAtributosCuentaService atributosCuentaService;



    @GetMapping("getCuenta")
    public ResponseEntity<Cuenta> verCuenta(@RequestParam String idCuenta) {
        Optional<Cuenta> o = cuentaService.findById(idCuenta);
        if (o.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(o.get());
    }

    @GetMapping("getTelefonos")
    public ResponseEntity<Telefono> verTelefonos(@RequestParam String idPersona) {
        Optional<Telefono> o = telefonoService.findByIdPersona(idPersona);
        if (o.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(o.get());
    }

    @GetMapping("getSellos")
    public ResponseEntity<?> verSellos(@RequestParam String idCuenta) {
        List<Optional<Sellos>> o = sellosService.findByIdCuenta(idCuenta);
        if (o.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok().body(o);
    }


    @GetMapping("getSello")
    public ResponseEntity<?> verSello(@RequestParam Long idImagen) {
       // Sello o = selloService.findByIdImagen(idImagen);

        Sello o=new Sello();

        o.setIdTipoImagen(2);
        o.setIdImagen(1845341L);
        o.setLongitud(3800);
        String img2="0x

        String im2=(img2).substring(2);

        byte[] ans = new byte[im2.length() / 2];
        for (int i = 0; i < ans.length; i++)
        {
            int index = i * 2;
            // Using parseInt() method of Integer class
            int val = Integer.parseInt(im2.substring(index, index + 2), 16);
            ans[i] = (byte)val;
        }

        byte[] im4=ans;

        o.setImagen(im4);


        if (o==null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok().body(o);
    }

    @GetMapping("getCondiciones")
    public ResponseEntity<?> verCondiciones(@RequestParam String idCuenta) {
        Optional<Condiciones> o = condicionesService.findByIdCuenta(idCuenta);
        if (o.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok().body(o);
    }


    @GetMapping("getFirmantes")
    public ResponseEntity<?> verFirmantes(@RequestParam String idCuenta) {
        List<Optional<Firmante>> o = firmanteService.findByIdCuenta(idCuenta);
        if (o.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok().body(o);
    }


    @GetMapping("getImagenfirma")
    public ResponseEntity<?> verFirma(@RequestParam Long idImagen) {
       // Firma o = firmaService.findByIdImagen(idImagen);

        Firma o=new Firma();

        o.setIdTipoImagen(1);
        o.setIdImagen(1845343L);
        o.setLongitud(1234);
        String img="0x

        String im=(img).substring(2);

        byte[] ans = new byte[im.length() / 2];
        for (int i = 0; i < ans.length; i++)
        {
            int index = i * 2;
            // Using parseInt() method of Integer class
            int val = Integer.parseInt(im.substring(index, index + 2), 16);
            ans[i] = (byte)val;
        }

        byte[] im2=ans;

        o.setImagen(im2);

        if (o==null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok().body(o);
    }


    @GetMapping("getPersona")
    public ResponseEntity<?> verPersona(@RequestParam String idPersona) {
        Optional<Persona> o = personaService.findByIdPersona(idPersona);
        if (o.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok().body(o);
    }


    @GetMapping("getAtributosCuentas")
    public ResponseEntity<?> verAtributos() {

        List<Tipocondicion> tcondiciones=atributosCuentaService.obtenerCondiciones();
        List<Tipocuenta> tcuentas=atributosCuentaService.obtenerTiposDeCuenta();
        List<Tipoimagen> timagen=atributosCuentaService.obtenerTiposDeImagenes();
        List<Tiporegla> tregla=atributosCuentaService.obtenerTiposDeRegla();
        List<Tipotitular> ttitular=atributosCuentaService.obtenerTiposDeTitular();

        Atributocuenta atributocuenta=new Atributocuenta(tcondiciones,tcuentas,timagen,tregla,ttitular);

        return ResponseEntity.ok().body(atributocuenta);
    }




}
